!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("quill")):"function"==typeof define&&define.amd?define(["quill"],t):"object"==typeof exports?exports.quillBetterTable=t(require("quill")):e.quillBetterTable=t(e.Quill)}(self,(e=>(()=>{"use strict";var t,r,o={511:(e,t,r)=>{r.d(t,{default:()=>Z});var o=r(436),n=r.n(o);function i(e,t){if("object"==typeof t)for(let r in t)e.style[r]=t[r]}function l(e,t){let r=t.getBoundingClientRect();return{x:e.x-r.x-t.scrollLeft,y:e.y-r.y-t.scrollTop,x1:e.x-r.x-t.scrollLeft+e.width,y1:e.y-r.y-t.scrollTop+e.height,width:e.width,height:e.height}}function s(e,t){return e&&Object.keys(e).reduce(((r,o)=>t.includes(o)?r:Object.assign({},r,{[o]:e[o]})),{})}function a(e){let t;if(t=e.path||e.composedPath&&e.composedPath(),null==t&&e.target){t=[];let r=e.target;for(t.push(r);r&&r.parentNode;)r=r.parentNode,t.push(r)}return t}class c{constructor(e,t,r){if(!e)return null;this.table=e,this.quill=t,this.options=r,this.domNode=null,this.initColTool()}initColTool(){const e=this.quill.root.parentNode,t=(this.table.getBoundingClientRect(),e.getBoundingClientRect()),r=this.table.parentNode.getBoundingClientRect();this.domNode=document.createElement("div"),this.domNode.classList.add("qlbt-col-tool"),this.updateToolCells(),e.appendChild(this.domNode),i(this.domNode,{width:`${r.width}px`,height:"12px",left:`${r.left-t.left+e.scrollLeft}px`,top:r.top-t.top+e.scrollTop-12-5+"px"})}createToolCell(){const e=document.createElement("div");e.classList.add("qlbt-col-tool-cell");const t=document.createElement("div");return t.classList.add("qlbt-col-tool-cell-holder"),i(e,{height:"12px"}),e.appendChild(t),e}updateToolCells(){const e=n().find(this.table),t=e.children.tail.children.head.children,r=e.colGroup().children,o=function(e){return e.reduce(((e,t)=>{const r=t.formats().colspan;return e+parseInt(r,10)}),0)}(t);let l=Array.from(this.domNode.querySelectorAll(".qlbt-col-tool-cell"));for(let e=0;e<Math.max(o,l.length);e++){let t=r.at(e),n=t&&parseInt(t.formats()[t.statics.blotName].width,10),s=null;l[e]?l[e]&&e>=o?l[e].remove():(s=l[e],i(s,{"min-width":`${n}px`})):(s=this.createToolCell(),this.domNode.appendChild(s),this.addColCellHolderHandler(s),i(s,{"min-width":`${n}px`}))}}destroy(){return this.domNode.remove(),null}addColCellHolderHandler(e){const t=n().find(this.table),r=e.querySelector(".qlbt-col-tool-cell-holder");let o=!1,l=0,s=0,a=0,c=0,d={},h={},u=null;const p=e=>{e.preventDefault(),o&&(s=e.clientX,a=c+s-l>=50?s-l:50-c,i(u,{left:`${h.left+h.width-1+a}px`}))},f=n=>{n.preventDefault();const m=Array.from(this.domNode.querySelectorAll(".qlbt-col-tool-cell")).indexOf(e),b=t.colGroup().children.at(m);o&&(b.format("width",c+a),i(e,{"min-width":`${c+a}px`}),l=0,s=0,a=0,c=0,o=!1,r.classList.remove("dragging")),document.removeEventListener("mousemove",p,!1),document.removeEventListener("mouseup",f,!1),d={},h={},u.remove(),u=null,t.updateTableWidth();const g=this.quill.getModule("better-table").tableSelection;g&&g.clearSelection()};r.addEventListener("mousedown",(t=>{document.addEventListener("mousemove",p,!1),document.addEventListener("mouseup",f,!1),d=this.table.getBoundingClientRect(),h=e.getBoundingClientRect(),u=document.createElement("div"),i(u,{position:"fixed",top:`${h.top}px`,left:h.left+h.width-1+"px",zIndex:"100",height:`${d.height+12+4}px`,width:"1px",backgroundColor:"#35A7ED"}),document.body.appendChild(u),o=!0,l=t.clientX,c=h.width,r.classList.add("dragging")}),!1)}colToolCells(){return Array.from(this.domNode.querySelectorAll(".qlbt-col-tool-cell"))}}const d=n().import("blots/block");class h extends d{static create(e){"string"==typeof e&&(e={value:e});const t=super.create(e.value);return v.forEach((r=>{e[r]&&t.setAttribute(`data-${r}`,e[r])})),w.forEach((r=>{e[r]&&t.setAttribute(`data-${r}`,e[r])})),t}static formats(e){const t={};return t.value=this.tagName.indexOf(e.tagName)+1,w.concat(v).reduce(((t,r)=>(e.hasAttribute(`data-${r}`)&&(t[r]=e.getAttribute(`data-${r}`)||void 0),t)),t)}format(e,t){const{row:r,cell:o,rowspan:n,colspan:i}=h.formats(this.domNode);e===h.blotName?t?super.format(e,{value:t,row:r,cell:o,rowspan:n,colspan:i}):r?this.replaceWith(x.blotName,{row:r,cell:o,rowspan:n,colspan:i}):super.format(e,t):super.format(e,t)}optimize(e){const{row:t,rowspan:r,colspan:o}=h.formats(this.domNode);if(!t||this.parent instanceof N||this.wrap(N.blotName,{row:t,colspan:o,rowspan:r}),this.enforceAllowedChildren(),null!=this.uiNode&&this.uiNode!==this.domNode.firstChild&&this.domNode.insertBefore(this.uiNode,this.domNode.firstChild),0===this.children.length)if(null!=this.statics.defaultChild){const e=this.scroll.create(this.statics.defaultChild.blotName);this.appendChild(e)}else this.remove();this.cache={}}}h.blotName="header",h.tagName=["H1","H2","H3","H4","H5","H6"];const u=h,p=n().import("blots/break"),f=n().import("blots/block"),m=n().import("blots/container"),b=["width"],g={width:100},v=["row","cell"],w=["rowspan","colspan"],y={rowspan:1,colspan:1};class x extends f{static create(e){const t=super.create(e);return v.forEach((r=>{let o="row"===r?B:D;t.setAttribute(`data-${r}`,e[r]||o())})),w.forEach((r=>{t.setAttribute(`data-${r}`,e[r]||y[r])})),e["cell-bg"]&&t.setAttribute("data-cell-bg",e["cell-bg"]),t}static formats(e){return w.concat(v).concat(["cell-bg"]).reduce(((t,r)=>(e.hasAttribute(`data-${r}`)&&(t[r]=e.getAttribute(`data-${r}`)||void 0),t)),{})}format(e,t){if(w.concat(v).indexOf(e)>-1)t?this.domNode.setAttribute(`data-${e}`,t):this.domNode.removeAttribute(`data-${e}`);else if("cell-bg"===e)t?this.domNode.setAttribute("data-cell-bg",t):this.domNode.removeAttribute("data-cell-bg");else if("header"===e){if(!t)return;const{row:r,cell:o,rowspan:n,colspan:i}=x.formats(this.domNode);super.format(e,{value:t,row:r,cell:o,rowspan:n,colspan:i})}else super.format(e,t)}optimize(e){const t=this.domNode.getAttribute("data-row"),r=this.domNode.getAttribute("data-rowspan"),o=this.domNode.getAttribute("data-colspan"),n=this.domNode.getAttribute("data-cell-bg");!this.statics.requiredContainer||this.parent instanceof this.statics.requiredContainer||this.wrap(this.statics.requiredContainer.blotName,{row:t,colspan:o,rowspan:r,"cell-bg":n}),super.optimize(e)}tableCell(){return this.parent}}x.blotName="table-cell-line",x.className="qlbt-cell-line",x.tagName="P";class N extends m{checkMerge(){if(super.checkMerge()&&null!=this.next.children.head){const e=this.children.head.formats()[this.children.head.statics.blotName],t=this.children.tail.formats()[this.children.tail.statics.blotName],r=this.next.children.head.formats()[this.next.children.head.statics.blotName],o=this.next.children.tail.formats()[this.next.children.tail.statics.blotName];return e.cell===t.cell&&e.cell===r.cell&&e.cell===o.cell}return!1}static create(e){const t=super.create(e);return t.setAttribute("data-row",e.row),w.forEach((r=>{e[r]&&t.setAttribute(r,e[r])})),e["cell-bg"]&&(t.setAttribute("data-cell-bg",e["cell-bg"]),t.style.backgroundColor=e["cell-bg"]),t}static formats(e){const t={};return e.hasAttribute("data-row")&&(t.row=e.getAttribute("data-row")),e.hasAttribute("data-cell-bg")&&(t["cell-bg"]=e.getAttribute("data-cell-bg")),w.reduce(((t,r)=>(e.hasAttribute(r)&&(t[r]=e.getAttribute(r)),t)),t)}cellOffset(){return this.parent?this.parent.children.indexOf(this):-1}formats(){const e={};return this.domNode.hasAttribute("data-row")&&(e.row=this.domNode.getAttribute("data-row")),this.domNode.hasAttribute("data-cell-bg")&&(e["cell-bg"]=this.domNode.getAttribute("data-cell-bg")),w.reduce(((e,t)=>(this.domNode.hasAttribute(t)&&(e[t]=this.domNode.getAttribute(t)),e)),e)}toggleAttribute(e,t){t?this.domNode.setAttribute(e,t):this.domNode.removeAttribute(e)}formatChildren(e,t){this.children.forEach((r=>{r.format(e,t)}))}format(e,t){w.indexOf(e)>-1?(this.toggleAttribute(e,t),this.formatChildren(e,t)):["row"].indexOf(e)>-1?(this.toggleAttribute(`data-${e}`,t),this.formatChildren(e,t)):"cell-bg"===e?(this.toggleAttribute("data-cell-bg",t),this.formatChildren(e,t),this.domNode.style.backgroundColor=t||"initial"):super.format(e,t)}optimize(e){const t=this.domNode.getAttribute("data-row");!this.statics.requiredContainer||this.parent instanceof this.statics.requiredContainer||this.wrap(this.statics.requiredContainer.blotName,{row:t}),super.optimize(e)}row(){return this.parent}rowOffset(){return this.row()?this.row().rowOffset():-1}table(){return this.row()&&this.row().table()}}N.blotName="table",N.tagName="TD";class C extends m{checkMerge(){if(super.checkMerge()&&null!=this.next.children.head){const e=this.children.head.formats(),t=this.children.tail.formats(),r=this.next.children.head.formats(),o=this.next.children.tail.formats();return e.row===t.row&&e.row===r.row&&e.row===o.row}return!1}static create(e){const t=super.create(e);return t.setAttribute("data-row",e.row),t}formats(){return["row"].reduce(((e,t)=>(this.domNode.hasAttribute(`data-${t}`)&&(e[t]=this.domNode.getAttribute(`data-${t}`)),e)),{})}optimize(e){!this.statics.requiredContainer||this.parent instanceof this.statics.requiredContainer||this.wrap(this.statics.requiredContainer.blotName),this.enforceAllowedChildren(),null!=this.uiNode&&this.uiNode!==this.domNode.firstChild&&this.domNode.insertBefore(this.uiNode,this.domNode.firstChild),this.children.length>0&&null!=this.next&&this.checkMerge()&&(this.next.moveChildren(this),this.next.remove())}rowOffset(){return this.parent?this.parent.children.indexOf(this):-1}table(){return this.parent&&this.parent.parent}}C.blotName="table-row",C.tagName="TR";class q extends m{}q.blotName="table-body",q.tagName="TBODY";class E extends f{static create(e){let t=super.create(e);return b.forEach((r=>{t.setAttribute(`${r}`,e[r]||g[r])})),t}static formats(e){return b.reduce(((t,r)=>(e.hasAttribute(`${r}`)&&(t[r]=e.getAttribute(`${r}`)||void 0),t)),{})}format(e,t){b.indexOf(e)>-1?this.domNode.setAttribute(`${e}`,t||g[e]):super.format(e,t)}html(){return this.domNode.outerHTML}}E.blotName="table-col",E.tagName="col";class A extends m{}A.blotName="table-col-group",A.tagName="colgroup";class S extends m{static create(){return super.create()}constructor(e,t){super(e,t),this.updateTableWidth()}updateTableWidth(){setTimeout((()=>{const e=this.colGroup();if(!e)return;const t=e.children.reduce(((e,t)=>e+parseInt(t.formats()[E.blotName].width,10)),0);this.domNode.style.width=`${t}px`}),0)}cells(e){return this.rows().map((t=>t.children.at(e)))}colGroup(){return this.children.head}deleteColumns(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],r=arguments.length>2?arguments[2]:void 0;const[o]=this.descendants(q);if(null==o||null==o.children.head)return;const n=this.descendants(N),i=[],s=[];if(n.forEach((t=>{const o=l(t.domNode.getBoundingClientRect(),r);o.x+5>e.x&&o.x1-5<e.x1?i.push(t):o.x<e.x+5&&o.x1>e.x1-5&&s.push(t)})),i.length===n.length)return this.tableDestroy(),!0;t.forEach((e=>{this.colGroup().children.at(t[0]).remove()})),i.forEach((e=>{e.remove()})),s.forEach((e=>{const r=parseInt(e.formats().colspan,10);parseInt(e.formats().width,10),e.format("colspan",r-t.length)})),this.updateTableWidth()}deleteRow(e,t){const[r]=this.descendants(q);if(null==r||null==r.children.head)return;const o=this.descendants(N),n=this.descendants(C),i=[],s=[],a=[],c=n.filter((r=>{const o=l(r.domNode.getBoundingClientRect(),t);return o.y>e.y-5&&o.y1<e.y1+5}));if(o.forEach((r=>{const o=l(r.domNode.getBoundingClientRect(),t);o.y>e.y-5&&o.y1<e.y1+5?i.push(r):o.y<e.y+5&&o.y1>e.y1-5&&(s.push(r),Math.abs(o.y-e.y)<5&&a.push(r))})),i.length===o.length)return void this.tableDestroy();const d=this.rows().reduce(((r,o)=>{let n=l(o.domNode.getBoundingClientRect(),t);return n.y>e.y-5&&n.y1<e.y1+5&&(r+=1),r}),0);a.forEach((e=>{const r=l(e.domNode.getBoundingClientRect(),t),o=e.parent.next,n=o.children.reduce(((e,o)=>{const n=l(o.domNode.getBoundingClientRect(),t);return Math.abs(r.x1-n.x)<5&&(e=o),e}),null);o.insertBefore(e,n),e.format("row",o.formats().row)})),i.forEach((e=>{e.remove()})),s.forEach((e=>{const t=parseInt(e.formats().rowspan,10);e.format("rowspan",t-d)})),c.forEach((e=>e.remove()))}tableDestroy(){const e=n().find(this.scroll.domNode.parentNode),t=e.getModule("better-table");this.remove(),t.hideTableTools(),e.update(n().sources.USER)}insertCell(e,t){const r=D(),o=e.formats().row,n=this.scroll.create(N.blotName,Object.assign({},y,{row:o})),i=this.scroll.create(x.blotName,{row:o,cell:r});n.appendChild(i),t?e.insertBefore(n,t):e.appendChild(n)}insertColumn(e,t){let r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],o=arguments.length>3?arguments[3]:void 0;const[n]=this.descendants(q),[i]=this.descendants(A),s=this.descendants(E);let a=[],c=[],d=[];if(null==n||null==n.children.head)return;this.descendants(N).forEach((t=>{const n=l(t.domNode.getBoundingClientRect(),o);r?Math.abs(n.x1-e.x1)<5?a.push(t):e.x1-n.x>5&&e.x1-n.x1<-5&&c.push(t):Math.abs(n.x-e.x)<5?a.push(t):e.x-n.x>5&&e.x-n.x1<-5&&c.push(t)})),a.forEach((e=>{const t=r?e.next:e,o=D(),n=e.parent,i=n.formats().row,l=e.formats(),s=this.scroll.create(N.blotName,Object.assign({},y,{row:i,rowspan:l.rowspan})),a=this.scroll.create(x.blotName,{row:i,cell:o,rowspan:l.rowspan});s.appendChild(a),t?n.insertBefore(s,t):n.appendChild(s),d.push(s)}));const h=this.scroll.create(E.blotName,!0);let u=r?s[t].next:s[t];return u?i.insertBefore(h,u):i.appendChild(h),c.forEach((e=>{const t=e.formats().colspan;e.format("colspan",parseInt(t,10)+1),d.push(e)})),d.sort(((e,t)=>e.domNode.getBoundingClientRect().y-t.domNode.getBoundingClientRect().y)),this.updateTableWidth(),d}insertRow(e,t,r){const[o]=this.descendants(q);if(null==o||null==o.children.head)return;const n=this.descendants(N),i=B(),s=this.scroll.create(C.blotName,{row:i});let a=[],c=[],d=[];n.forEach((o=>{const n=l(o.domNode.getBoundingClientRect(),r);t?Math.abs(n.y1-e.y1)<5?a.push(o):e.y1-n.y>5&&e.y1-n.y1<-5&&c.push(o):Math.abs(n.y-e.y)<5?a.push(o):e.y-n.y>5&&e.y-n.y1<-5&&c.push(o)}));const h=(e,t)=>e.domNode.getBoundingClientRect().x-t.domNode.getBoundingClientRect().x;a.sort(h),a.forEach((e=>{const t=D(),r=e.formats(),o=this.scroll.create(N.blotName,Object.assign({},y,{row:i,colspan:r.colspan})),n=this.scroll.create(x.blotName,{row:i,cell:t,colspan:r.colspan}),l=this.scroll.create(p.blotName);n.appendChild(l),o.appendChild(n),s.appendChild(o),d.push(o)})),c.forEach((e=>{const t=parseInt(e.formats().rowspan,10);e.format("rowspan",t+1),d.push(e)}));const u=this.rows().find((o=>{let n=l(o.domNode.getBoundingClientRect(),r);return t?Math.abs(n.y-e.y-e.height)<5:Math.abs(n.y-e.y)<5}));return o.insertBefore(s,u),d.sort(h),d}mergeCells(e,t,r,o,n){const i=t.reduce(((e,t,n)=>(0!==n?(e&&t.moveChildren(e),t.remove()):(t.format("colspan",o),t.format("rowspan",r),e=t),e)),null);let l=i.domNode.getAttribute("data-row"),s=i.children.head.domNode.getAttribute("data-cell");return i.children.forEach((e=>{e.format("cell",s),e.format("row",l),e.format("colspan",o),e.format("rowspan",r)})),i}unmergeCells(e,t){let r={},o=1,n=1;e.forEach((e=>{if(r=e.formats(),o=r.rowspan,n=r.colspan,n>1){let t=e.next,r=e.row();e.format("colspan",1);for(let e=n;e>1;e--)this.insertCell(r,t)}if(o>1){let r=o,i=e.row().next;for(;r>1;){let o=i.children.reduce(((r,o)=>{let n=l(e.domNode.getBoundingClientRect(),t),i=l(o.domNode.getBoundingClientRect(),t);return Math.abs(n.x1-i.x)<5&&(r=o),r}),null);for(let e=n;e>0;e--)this.insertCell(i,o);r-=1,i=i.next}e.format("rowspan",1)}}))}rows(){const e=this.children.tail;return null==e?[]:e.children.map((e=>e))}}S.blotName="table-container",S.className="quill-better-table",S.tagName="TABLE";class T extends m{constructor(e,t){super(e,t);const r=n().find(e.domNode.parentNode);t.addEventListener("scroll",(e=>{const t=r.getModule("better-table");t.columnTool&&(t.columnTool.domNode.scrollLeft=e.target.scrollLeft),t.tableSelection&&t.tableSelection.selectedTds.length>0&&t.tableSelection.repositionHelpLines()}),!1)}table(){return this.children.head}}function B(){return`row-${Math.random().toString(36).slice(2,6)}`}function D(){return`cell-${Math.random().toString(36).slice(2,6)}`}T.blotName="table-view",T.className="quill-better-table-wrapper",T.tagName="DIV",T.allowedChildren=[S],S.requiredContainer=T,S.allowedChildren=[q,A],q.requiredContainer=S,q.allowedChildren=[C],C.requiredContainer=q,C.allowedChildren=[N],N.requiredContainer=C,N.allowedChildren=[x,u],x.requiredContainer=N,A.allowedChildren=[E],A.requiredContainer=S,E.requiredContainer=A;const L=["left","right","top","bottom"];class H{constructor(e,t,r){if(!e)return null;this.table=e,this.quill=t,this.options=r,this.boundary={},this.selectedTds=[],this.dragging=!1,this.selectingHandler=this.mouseDownHandler.bind(this),this.clearSelectionHandler=this.clearSelection.bind(this),this.helpLinesInitial(),this.quill.root.addEventListener("mousedown",this.selectingHandler,!1),this.quill.on("text-change",this.clearSelectionHandler)}helpLinesInitial(){let e=this.quill.root.parentNode;L.forEach((t=>{this[t]=document.createElement("div"),this[t].classList.add("qlbt-selection-line"),this[t].classList.add("qlbt-selection-line-"+t),i(this[t],{position:"absolute",display:"none","background-color":"#0589f3"}),e.appendChild(this[t])}))}mouseDownHandler(e){if(0!==e.button||!e.target.closest(".quill-better-table"))return;this.quill.root.addEventListener("mousemove",n,!1),this.quill.root.addEventListener("mouseup",(function e(r){t.quill.root.removeEventListener("mousemove",n,!1),t.quill.root.removeEventListener("mouseup",e,!1),t.dragging=!1}),!1);const t=this,r=e.target.closest("td[data-row]"),o=l(r.getBoundingClientRect(),this.quill.root.parentNode);function n(e){if(0!==e.button||!e.target.closest(".quill-better-table"))return;const n=e.target.closest("td[data-row]"),i=l(n.getBoundingClientRect(),t.quill.root.parentNode);t.boundary=I(o,i),t.correctBoundary(),t.selectedTds=t.computeSelectedTds(),t.repositionHelpLines(),r!==n&&t.quill.blur()}this.dragging=!0,this.boundary=I(o,o),this.correctBoundary(),this.selectedTds=this.computeSelectedTds(),this.repositionHelpLines()}correctBoundary(){n().find(this.table).descendants(N).forEach((e=>{let{x:t,y:r,width:o,height:n}=l(e.domNode.getBoundingClientRect(),this.quill.root.parentNode);(t+2>=this.boundary.x&&t+2<=this.boundary.x1||t-2+o>=this.boundary.x&&t-2+o<=this.boundary.x1)&&(r+2>=this.boundary.y&&r+2<=this.boundary.y1||r-2+n>=this.boundary.y&&r-2+n<=this.boundary.y1)&&(this.boundary=I(this.boundary,{x:t,y:r,width:o,height:n}))}))}computeSelectedTds(){return n().find(this.table).descendants(N).reduce(((e,t)=>{let{x:r,y:o,width:n,height:i}=l(t.domNode.getBoundingClientRect(),this.quill.root.parentNode);return r+2>=this.boundary.x&&r-2+n<=this.boundary.x1&&o+2>=this.boundary.y&&o-2+i<=this.boundary.y1&&e.push(t),e}),[])}repositionHelpLines(){const e=this.table.parentNode.scrollLeft;i(this.left,{display:"block",left:this.boundary.x-e-1+"px",top:`${this.boundary.y}px`,height:`${this.boundary.height+1}px`,width:"1px"}),i(this.right,{display:"block",left:this.boundary.x1-e+"px",top:`${this.boundary.y}px`,height:`${this.boundary.height+1}px`,width:"1px"}),i(this.top,{display:"block",left:this.boundary.x-1-e+"px",top:`${this.boundary.y}px`,width:`${this.boundary.width+1}px`,height:"1px"}),i(this.bottom,{display:"block",left:this.boundary.x-1-e+"px",top:`${this.boundary.y1+1}px`,width:`${this.boundary.width+1}px`,height:"1px"})}refreshHelpLinesPosition(){const e=l(this.selectedTds[0].domNode.getBoundingClientRect(),this.quill.root.parentNode),t=l(this.selectedTds[this.selectedTds.length-1].domNode.getBoundingClientRect(),this.quill.root.parentNode);this.boundary=I(e,t),this.repositionHelpLines()}destroy(){return L.forEach((e=>{this[e].remove(),this[e]=null})),this.quill.root.removeEventListener("mousedown",this.selectingHandler,!1),this.quill.off("text-change",this.clearSelectionHandler),null}setSelection(e,t){this.boundary=I(l(e,this.quill.root.parentNode),l(t,this.quill.root.parentNode)),this.correctBoundary(),this.selectedTds=this.computeSelectedTds(),this.repositionHelpLines()}clearSelection(){this.boundary={},this.selectedTds=[],L.forEach((e=>{this[e]&&i(this[e],{display:"none"})}))}}function I(e,t){let r=Math.min(e.x,t.x,e.x+e.width-1,t.x+t.width-1),o=Math.max(e.x,t.x,e.x+e.width-1,t.x+t.width-1),n=Math.min(e.y,t.y,e.y+e.height-1,t.y+t.height-1),i=Math.max(e.y,t.y,e.y+e.height-1,t.y+t.height-1);return{x:r,x1:o,y:n,y1:i,width:o-r,height:i-n}}const k=["white","red","yellow","blue"],O={insertColumnRight:{text:"Insert column right",iconSrc:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg class="icon" width="20px" height="20px" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg"><path fill="#595959" d="M73.142857 336.64h526.628572v43.885714H73.142857zM73.142857 643.657143h526.628572v43.885714H73.142857zM336.457143 117.028571h43.885714v789.942858h-43.885714zM204.8 73.142857h614.4a131.657143 131.657143 0 0 1 131.657143 131.657143v614.4a131.657143 131.657143 0 0 1-131.657143 131.657143H204.8A131.657143 131.657143 0 0 1 73.142857 819.2V204.8A131.84 131.84 0 0 1 204.8 73.142857z m0 43.885714a87.771429 87.771429 0 0 0-87.771429 87.771429v614.4a87.771429 87.771429 0 0 0 87.771429 87.771429h614.4a87.771429 87.771429 0 0 0 87.771429-87.771429V204.8a87.771429 87.771429 0 0 0-87.771429-87.771429zM819.2 73.142857h-219.428571v877.714286h219.428571a131.657143 131.657143 0 0 0 131.657143-131.657143V204.8A131.84 131.84 0 0 0 819.2 73.142857z m44.068571 460.982857h-65.828571v65.828572H753.371429v-65.828572h-65.828572V490.057143h65.828572v-65.828572h44.068571v65.828572h65.828571z"/></svg>',handler(){const e=n().find(this.table);let t=R(this.columnToolCells,this.boundary,((e,t)=>Math.abs(e.x+e.width-t.x1)<=5),this.quill.root.parentNode);const r=e.insertColumn(this.boundary,t,!0,this.quill.root.parentNode);this.tableColumnTool.updateToolCells(),this.quill.update(n().sources.USER),this.quill.setSelection(this.quill.getIndex(r[0]),0,n().sources.SILENT),this.tableSelection.setSelection(r[0].domNode.getBoundingClientRect(),r[0].domNode.getBoundingClientRect())}},insertColumnLeft:{text:"Insert column left",iconSrc:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg class="icon" width="20px" height="20.00px" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg"><path fill="#595959" d="M380.342857 336.457143h526.811429v43.885714H380.342857z m0 307.2h526.811429v43.885714H380.342857zM643.657143 117.028571h43.885714v789.942858h-43.885714zM204.8 73.142857h614.582857A131.474286 131.474286 0 0 1 950.857143 204.8v614.4a131.657143 131.657143 0 0 1-131.657143 131.657143H204.8A131.657143 131.657143 0 0 1 73.142857 819.2V204.8A131.657143 131.657143 0 0 1 204.8 73.142857z m0 43.885714a87.588571 87.588571 0 0 0-87.588571 87.771429v614.4a87.588571 87.588571 0 0 0 87.588571 87.771429h614.582857a87.771429 87.771429 0 0 0 87.771429-87.771429V204.8a87.771429 87.771429 0 0 0-87.771429-87.771429zM204.8 73.142857A131.657143 131.657143 0 0 0 73.142857 204.8v614.4a131.657143 131.657143 0 0 0 131.657143 131.657143h219.428571V73.142857z m131.84 460.8h-65.828571v65.828572h-43.885715v-65.828572h-65.828571v-43.885714h65.828571v-65.828572h43.885715v65.828572h65.828571z"/></svg>',handler(){const e=n().find(this.table);let t=R(this.columnToolCells,this.boundary,((e,t)=>Math.abs(e.x-t.x)<=5),this.quill.root.parentNode);const r=e.insertColumn(this.boundary,t,!1,this.quill.root.parentNode);this.tableColumnTool.updateToolCells(),this.quill.update(n().sources.USER),this.quill.setSelection(this.quill.getIndex(r[0]),0,n().sources.SILENT),this.tableSelection.setSelection(r[0].domNode.getBoundingClientRect(),r[0].domNode.getBoundingClientRect())}},insertRowUp:{text:"Insert row up",iconSrc:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg class="icon" width="20px" height="20.00px" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg"><path fill="#595959" d="M73.142857 599.771429h877.714286v43.885714H73.142857zM336.457143 380.342857h43.885714v526.628572h-43.885714z m307.2 0h43.885714v526.628572h-43.885714zM204.8 73.142857h614.4a131.657143 131.657143 0 0 1 131.657143 131.657143v614.4a131.657143 131.657143 0 0 1-131.657143 131.657143H204.8A131.657143 131.657143 0 0 1 73.142857 819.2V204.8A131.657143 131.657143 0 0 1 204.8 73.142857z m0 43.885714a87.771429 87.771429 0 0 0-87.771429 87.771429v614.4a87.588571 87.588571 0 0 0 87.771429 87.771429h614.4a87.588571 87.588571 0 0 0 87.771429-87.771429V204.8a87.771429 87.771429 0 0 0-87.771429-87.771429zM819.2 73.142857H204.8A131.657143 131.657143 0 0 0 73.142857 204.8v219.428571h877.714286v-219.428571A131.657143 131.657143 0 0 0 819.2 73.142857z m-219.428571 197.485714h-65.828572v65.828572h-43.885714v-65.828572h-65.828572v-43.885714h65.828572V160.914286h43.885714v65.828571h65.828572z"/></svg>',handler(){const e=n().find(this.table).insertRow(this.boundary,!1,this.quill.root.parentNode);this.quill.update(n().sources.USER),this.quill.setSelection(this.quill.getIndex(e[0]),0,n().sources.SILENT),this.tableSelection.setSelection(e[0].domNode.getBoundingClientRect(),e[0].domNode.getBoundingClientRect())}},insertRowDown:{text:"Insert row down",iconSrc:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg class="icon" width="20px" height="20.00px" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg"><path fill="#595959" d="M204.8 73.142857h614.4a131.657143 131.657143 0 0 1 131.657143 131.657143v614.4a131.657143 131.657143 0 0 1-131.657143 131.657143H204.8A131.657143 131.657143 0 0 1 73.142857 819.2V204.8A131.84 131.84 0 0 1 204.8 73.142857z m0 43.885714a87.771429 87.771429 0 0 0-87.771429 87.771429v614.4a87.771429 87.771429 0 0 0 87.771429 87.771429h614.4a87.771429 87.771429 0 0 0 87.771429-87.771429V204.8a87.771429 87.771429 0 0 0-87.771429-87.771429zM73.142857 336.457143h877.714286v44.068571H73.142857zM336.64 117.028571h43.885714v526.628572h-43.885714z m307.017143 0h44.068571v526.628572H643.657143zM73.142857 599.771429v219.428571a131.657143 131.657143 0 0 0 131.657143 131.657143h614.4a131.657143 131.657143 0 0 0 131.657143-131.657143v-219.428571z m526.628572 197.485714h-65.645715v65.828571H490.057143v-65.828571h-65.828572v-43.885714h65.828572v-65.828572h44.068571v65.828572h65.645715z"/></svg>',handler(){const e=n().find(this.table).insertRow(this.boundary,!0,this.quill.root.parentNode);this.quill.update(n().sources.USER),this.quill.setSelection(this.quill.getIndex(e[0]),0,n().sources.SILENT),this.tableSelection.setSelection(e[0].domNode.getBoundingClientRect(),e[0].domNode.getBoundingClientRect())}},mergeCells:{text:"Merge selected cells",iconSrc:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg class="icon" width="20px" height="20.00px" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg"><path fill="#595959" d="M925.99596 99.038384c-25.470707-25.6-60.121212-39.822222-96.323233-39.822222H194.19798c-36.072727 0-70.723232 14.351515-96.323233 39.822222-25.6 25.6-39.822222 60.121212-39.822222 96.323232v635.474748c0 36.072727 14.351515 70.723232 39.822222 96.323232C123.474747 952.759596 158.125253 967.111111 194.19798 967.111111h635.474747c36.072727 0 70.723232-14.351515 96.323233-39.951515 25.6-25.6 39.951515-60.121212 39.951515-96.323232V195.361616c0-36.072727-14.351515-70.723232-39.951515-96.323232z m-277.850505 5.559596v226.909091H375.725253V104.59798h272.420202zM103.434343 195.361616c0-24.048485 9.567677-47.191919 26.634344-64.129293 17.066667-17.066667 40.080808-26.634343 64.129293-26.634343h136.145454v226.909091H103.434343V195.361616z m90.763637 726.367677c-24.048485 0-47.191919-9.567677-64.129293-26.634344-17.066667-17.066667-26.634343-40.080808-26.634344-64.129292V649.309091h226.909091v272.420202H194.19798z m181.527273 0V649.309091h272.290909v272.420202H375.725253z m544.711111-90.892929c0 24.048485-9.567677 47.191919-26.634344 64.129293-17.066667 17.066667-40.080808 26.634343-64.129293 26.634343H693.527273V649.309091h226.909091v181.527273zM693.527273 331.507071V104.59798h136.145454c24.048485 0 47.191919 9.567677 64.129293 26.634343 17.066667 17.066667 26.634343 40.080808 26.634344 64.129293v136.145455H693.527273z"/></svg>',handler(){const e=n().find(this.table),t=e.rows().reduce(((e,t)=>{let r=l(t.domNode.getBoundingClientRect(),this.quill.root.parentNode);return r.y>this.boundary.y-5&&r.y+r.height<this.boundary.y+this.boundary.height+5&&(e+=1),e}),0),r=this.columnToolCells.reduce(((e,t)=>{let r=l(t.getBoundingClientRect(),this.quill.root.parentNode);return r.x>this.boundary.x-5&&r.x+r.width<this.boundary.x+this.boundary.width+5&&(e+=1),e}),0),o=e.mergeCells(this.boundary,this.selectedTds,t,r,this.quill.root.parentNode);this.quill.update(n().sources.USER),this.tableSelection.setSelection(o.domNode.getBoundingClientRect(),o.domNode.getBoundingClientRect())}},unmergeCells:{text:"Unmerge cells",iconSrc:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg class="icon" width="20px" height="20.00px" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg"><path fill="#595959" d="M336.457143 73.142857h43.885714v877.714286h-43.885714z m307.382857 0h43.702857v877.714286h-43.702857z m-438.857143 0h614.4A131.657143 131.657143 0 0 1 950.857143 204.8v614.4a131.474286 131.474286 0 0 1-131.474286 131.657143h-614.4A131.657143 131.657143 0 0 1 73.142857 819.2V204.8A131.84 131.84 0 0 1 204.982857 73.142857z m0 43.885714a87.588571 87.588571 0 0 0-87.771428 87.771429v614.4a87.588571 87.588571 0 0 0 87.771428 87.771429h614.4a87.771429 87.771429 0 0 0 87.771429-87.771429V204.8a87.771429 87.771429 0 0 0-87.771429-87.771429zM73.142857 336.457143h877.714286v307.2H73.142857z m292.571429 43.885714v219.428572h292.571428v-219.428572z"/></svg>',handler(){n().find(this.table).unmergeCells(this.selectedTds,this.quill.root.parentNode),this.quill.update(n().sources.USER),this.tableSelection.clearSelection()}},deleteColumn:{text:"Delete selected columns",iconSrc:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg class="icon" width="20px" height="20.00px" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg"><path fill="#595959" d="M925.996 99.038c-25.47-25.6-60.121-39.822-96.323-39.822H194.198c-75.12 0.13-136.016 61.026-136.145 136.146v635.345c0 36.073 14.351 70.723 39.822 96.323 25.6 25.73 60.25 40.081 96.323 40.081h635.475c36.072 0 70.723-14.351 96.323-39.951 25.6-25.6 39.951-60.122 39.951-96.324V195.362c0-36.073-14.351-70.724-39.951-96.324z m-365.77 494.287L512 545.228l-48.226 48.097-32.194-31.935 48.355-48.226-48.226-48.097 32.194-32.194L512 480.97l48.097-48.097 32.194 32.194-48.097 48.097 48.226 48.226-32.194 31.935zM103.434 195.362c0-24.049 9.568-47.192 26.635-64.13 17.066-17.066 40.08-26.634 64.129-26.634h136.145v226.91H103.434V195.361z m0 181.656h226.91V649.31h-226.91V377.02z m90.764 544.84c-24.049 0-47.192-9.567-64.13-26.634-17.066-17.066-26.634-40.08-26.634-64.258V694.69h226.91v227.168H194.197z m726.238-90.763c0 24.048-9.438 47.192-26.505 64.259-17.066 17.066-40.21 26.634-64.258 26.505H693.527V694.69h226.91v136.404z m0-181.786H693.527V377.02h226.91v272.29zM693.527 331.507V104.598h136.146c24.048 0 47.192 9.438 64.258 26.505 17.067 17.067 26.635 40.21 26.505 64.259v136.145H693.527z"/></svg>',handler(){const e=n().find(this.table);let t=(r=this.columnToolCells,o=this.boundary,i=(e,t)=>e.x+5>t.x&&e.x+e.width-5<t.x1,s=this.quill.root.parentNode,r.reduce(((e,t)=>{let n=l(t.getBoundingClientRect(),s);return i(n,o)&&e.push(r.indexOf(t)),e}),[]));var r,o,i,s;e.deleteColumns(this.boundary,t,this.quill.root.parentNode)||(this.tableColumnTool.updateToolCells(),this.quill.update(n().sources.USER),this.tableSelection.clearSelection())}},deleteRow:{text:"Delete selected rows",iconSrc:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg class="icon" width="20px" height="20.00px" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg"><path fill="#595959" d="M925.99596 99.038384c-25.470707-25.6-60.121212-39.822222-96.323233-39.822222H194.19798c-36.072727 0-70.723232 14.351515-96.323233 39.822222-25.6 25.6-39.822222 60.121212-39.822222 96.323232v635.474748c0 36.072727 14.351515 70.723232 39.822222 96.323232C123.474747 952.759596 158.125253 967.111111 194.19798 967.111111h635.474747c36.072727 0 70.723232-14.351515 96.323233-39.951515 25.6-25.6 39.951515-60.121212 39.951515-96.323232V195.361616c0-36.072727-14.351515-70.723232-39.951515-96.323232z m-550.270707 5.559596h272.290909v227.167677H375.725253V104.59798z m56.242424 360.468687l31.935353-32.19394 48.09697 48.226263 48.09697-48.226263 32.193939 32.19394-48.09697 48.096969 48.226263 48.226263-32.193939 31.935354-48.226263-48.09697-48.226263 48.09697-31.935353-31.935354 48.226262-48.226263-48.096969-48.096969zM103.434343 195.361616c0-24.048485 9.567677-47.191919 26.634344-64.129293 17.066667-17.066667 40.080808-26.634343 64.129293-26.634343h136.145454v227.167677H103.434343V195.361616z m817.002021 635.733333c0 24.048485-9.567677 47.191919-26.634344 64.258586-17.066667 17.066667-40.080808 26.634343-64.129293 26.634344H194.19798c-24.048485 0-47.191919-9.567677-64.258586-26.634344C112.872727 878.157576 103.434343 855.014141 103.434343 830.836364V694.690909h226.909091v226.909091h45.381819V694.690909h272.290909v226.909091h45.381818V694.690909h226.909091v136.40404z m0-499.329292H693.527273V104.59798h136.145454c24.048485 0 47.191919 9.567677 64.129293 26.634343 17.066667 17.066667 26.634343 40.080808 26.634344 64.129293v136.404041z"/></svg>',handler(){n().find(this.table).deleteRow(this.boundary,this.quill.root.parentNode),this.quill.update(n().sources.USER),this.tableSelection.clearSelection()}},deleteTable:{text:"Delete table",iconSrc:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg class="icon" width="20px" height="20.00px" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg"><path fill="#595959" d="M764.42168889 830.5152c0 30.23530667-24.61013333 54.84430222-54.84316444 54.84430222H314.42147555c-30.23416889 0-54.84316445-24.61013333-54.84316444-54.84430222V248.32796445h504.84337778v582.18723555zM369.26577778 149.89084445c0-6.32832 4.92202667-11.25034667 11.25034667-11.25034667H644.18702222c6.32832 0 11.25034667 4.92202667 11.25034667 11.25034667v33.04675555H369.26577778V149.89084445z m559.68768 33.04675555H720.82773333V149.89084445c0-42.1888-34.45191111-76.64071111-76.64071111-76.64071112H380.51612445c-42.1888 0-76.64071111 34.45191111-76.64071112 76.64071112v33.04675555h-208.82773333c-18.28181333 0-33.04789333 14.76608-33.04789333 33.04675555s14.76608 33.04675555 33.04675555 33.04675556h98.43825778v581.48408889c0 66.79779555 54.14001778 120.93781333 120.93667555 120.93781333h395.1570489c66.79665778 0 120.93667555-54.14001778 120.93667555-120.93781333V248.32796445h98.43825778c18.28067555 0 33.04675555-14.76494222 33.04675555-33.04675556s-14.76608-32.34360889-33.04675555-32.34360889zM512 786.21923555c18.28181333 0 33.04675555-14.76608 33.04675555-33.04789333v-351.56195555c0-18.28181333-14.76494222-33.04675555-33.04675555-33.04675556s-33.04675555 14.76494222-33.04675555 33.04675556v351.56195555c0 18.28181333 14.76494222 33.04789333 33.04675555 33.04789333m-153.98456889 0c18.28181333 0 33.04675555-14.76608 33.04675556-33.04789333v-351.56195555c0-18.28181333-14.76494222-33.04675555-33.04675556-33.04675556s-33.04675555 14.76494222-33.04675556 33.04675556v351.56195555c0.70314667 18.28181333 15.46922667 33.04789333 33.04675556 33.04789333m307.96913778 0c18.28067555 0 33.04675555-14.76608 33.04675556-33.04789333v-351.56195555c0-18.28181333-14.76608-33.04675555-33.04675556-33.04675556s-33.04675555 14.76494222-33.04675556 33.04675556v351.56195555c0 18.28181333 14.76494222 33.04789333 33.04675556 33.04789333"/></svg>',handler(){const e=this.quill.getModule("better-table"),t=n().find(this.table);e.hideTableTools(),t.remove(),this.quill.update(n().sources.USER)}}};class M{constructor(e,t,r){const o=t.getModule("better-table");this.tableSelection=o.tableSelection,this.table=e.table,this.quill=t,this.options=r,this.menuItems=Object.assign({},O,r.items),this.tableColumnTool=o.columnTool,this.boundary=this.tableSelection.boundary,this.selectedTds=this.tableSelection.selectedTds,this.destroyHandler=this.destroy.bind(this),this.columnToolCells=this.tableColumnTool.colToolCells(),this.colorSubTitle=r.color&&r.color.text?r.color.text:"Background Colors",this.cellColors=r.color&&r.color.colors?r.color.colors:k,this.menuInitial(e),this.mount(),document.addEventListener("click",this.destroyHandler,!1)}mount(){document.body.appendChild(this.domNode)}destroy(){return this.domNode.remove(),document.removeEventListener("click",this.destroyHandler,!1),null}menuInitial(e){let{table:t,left:r,top:o}=e;this.domNode=document.createElement("div"),this.domNode.classList.add("qlbt-operation-menu"),i(this.domNode,{position:"absolute",left:`${r}px`,top:`${o}px`,"min-height":"150px",width:"200px"});for(let e in this.menuItems)this.menuItems[e]&&(this.domNode.appendChild(this.menuItemCreator(Object.assign({},O[e],this.menuItems[e]))),["insertRowDown","unmergeCells"].indexOf(e)>-1&&this.domNode.appendChild(n()));function n(){const e=document.createElement("div");return e.classList.add("qlbt-operation-menu-dividing"),e}this.options.color&&!1!==this.options.color&&(this.domNode.appendChild(n()),this.domNode.appendChild(function(e){const t=document.createElement("div");return t.classList.add("qlbt-operation-menu-subtitle"),t.innerText=e,t}(this.colorSubTitle)),this.domNode.appendChild(this.colorsItemCreator(this.cellColors)))}colorsItemCreator(e){const t=this,r=document.createElement("div");return r.classList.add("qlbt-operation-color-picker"),e.forEach((e=>{let o=function(e){const r=document.createElement("div");return r.classList.add("qlbt-operation-color-picker-item"),r.setAttribute("data-color",e),r.style.backgroundColor=e,r.addEventListener("click",(function(){const r=t.tableSelection.selectedTds;r&&r.length>0&&r.forEach((t=>{t.format("cell-bg",e)}))}),!1),r}(e);r.appendChild(o)})),r}menuItemCreator(e){let{text:t,iconSrc:r,handler:o}=e;const n=document.createElement("div");n.classList.add("qlbt-operation-menu-item");const i=document.createElement("span");i.classList.add("qlbt-operation-menu-icon"),i.innerHTML=r;const l=document.createElement("span");return l.classList.add("qlbt-operation-menu-text"),l.innerText=t,n.appendChild(i),n.appendChild(l),n.addEventListener("click",o.bind(this),!1),n}}function R(e,t,r,o){return e.reduce(((n,i)=>{let s=l(i.getBoundingClientRect(),o);return r(s,t)&&(n=e.indexOf(i)),n}),!1)}const z=n().import("ui/picker"),V=class extends z{constructor(e,t){super(e),this.label.innerHTML=t,this.container.classList.add("ql-table-picker")}buildItem(e){const t=super.buildItem(e);return t.addEventListener("mouseover",(()=>{let e=t.getAttribute("data-value").split("x"),r=parseInt(e[1]),o=parseInt(e[0]),n=Array.from(this.container.querySelectorAll(".ql-picker-item"));e=this.container.querySelector(".ql-picker-item:last-child").getAttribute("data-value").split("x");let i=parseInt(e[0]);n.forEach((e=>{e.classList.remove("hover")}));for(let e=0;e<r;e++)n.slice(e*i,e*i+o).forEach((e=>{e.classList.add("hover")}))})),t}selectItem(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];super.selectItem(e,t),null!=e&&(e.classList.remove("ql-selected"),e.label&&(e.label.removeAttribute("data-value"),e.label.removeAttribute("data-label")),Array.from(this.container.querySelectorAll(".hover")).forEach((e=>{e.classList.remove("hover")})))}};var _=r(470),j=r.n(_);const $=n().import("themes/snow"),P=class extends ${constructor(e,t){super(e,t)}buildPickers(e,t){let r=(e=Array.from(e)).map(((e,r,o)=>{if(e.classList.contains("ql-better-table")){if(o.splice(r,1),null==e.querySelector("option"))for(let t=1;t<=8;t++)for(let r=1;r<=10;r++){const o=document.createElement("option");o.setAttribute("value",r+"x"+t),e.appendChild(o)}return new V(e,t.table)}}));super.buildPickers(e,t),this.pickers=j()([],this.pickers,r)}},U=n().import("delta");function G(e,t,r){const o=e.parentNode,n="TABLE"===o.parentNode.tagName?o.parentNode:o.parentNode.parentNode,i=Array.from(n.querySelectorAll("tr")),l=Array.from(o.querySelectorAll("td")),a=i.indexOf(o)+1,c=l.indexOf(e)+1,d=e.getAttribute("colspan")||!1,h=e.getAttribute("rowspan")||!1,u=e.getAttribute("data-cell-bg")||e.style.backgroundColor;return 0===t.length()?t=(new U).insert("\n",{"table-cell-line":{row:a,cell:c,rowspan:h,colspan:d}}):(t=t.reduce(((e,t)=>{if(t.insert&&"string"==typeof t.insert){const r=[];let o=t.insert,n=0;for(let e=0;e<t.insert.length;e++)"\n"===o.charAt(e)&&(0===e||r.push(o.substring(n,e)),r.push("\n"),n=e+1);const i=o.substring(n);i&&r.push(i),r.forEach((r=>{"\n"===r?e.insert("\n",t.attributes):e.insert(r,s(t.attributes,["table","table-cell-line"]))}))}else e.insert(t.insert,t.attributes);return e}),new U)).reduce(((e,t)=>(t.insert&&"string"==typeof t.insert&&t.insert.startsWith("\n")?e.insert(t.insert,Object.assign({},Object.assign({},{row:a},t.attributes.table),{"table-cell-line":{row:a,cell:c,rowspan:h,colspan:d,"cell-bg":u}},s(t.attributes,["table"]))):t.attributes&&t.attributes.background&&t.attributes.background===function(e){if(/^(rgb|RGB)/.test(e)){for(var t=e.toString().match(/\d+/g),r="#",o=0;o<3;o++)r+=("0"+Number(t[o]).toString(16)).slice(-2);return r}if(/^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/.test(e)){var n=e.replace(/#/,"").split("");if(6===n.length)return e;if(3===n.length){var i="#";for(o=0;o<n.length;o+=1)i+=n[o]+n[o];return i}}return e}(u)?e.insert(t.insert,Object.assign({},s(t.attributes,["table","table-cell-line","background"]))):e.insert(t.insert,Object.assign({},s(t.attributes,["table","table-cell-line"]))),e)),new U)}function W(e,t,r){const o=e.parentNode,n="TABLE"===o.parentNode.tagName?o.parentNode:o.parentNode.parentNode,i=Array.from(n.querySelectorAll("tr")),l=Array.from(o.querySelectorAll("th")),a=i.indexOf(o)+1,c=l.indexOf(e)+1,d=e.getAttribute("colspan")||!1,h=e.getAttribute("rowspan")||!1;return 0===t.length()?t=(new U).insert("\n",{"table-cell-line":{row:a,cell:c,rowspan:h,colspan:d}}):(t=t.reduce(((e,t)=>{if(t.insert&&"string"==typeof t.insert){const r=[];let o=t.insert,n=0;for(let e=0;e<t.insert.length;e++)"\n"===o.charAt(e)&&(0===e||r.push(o.substring(n,e)),r.push("\n"),n=e+1);const i=o.substring(n);i&&r.push(i),r.indexOf("\n")<0&&r.push("\n"),r.forEach((r=>{"\n"===r?e.insert("\n",{"table-cell-line":{row:a,cell:c,rowspan:h,colspan:d}}):e.insert(r,t.attributes)}))}else e.insert(t.insert,t.attributes);return e}),new U)).reduce(((e,t)=>(t.insert&&"string"==typeof t.insert&&t.insert.startsWith("\n")?e.insert(t.insert,Object.assign({},{"table-cell-line":{row:a,cell:c,rowspan:h,colspan:d}})):e.insert(t.insert,Object.assign({},s(t.attributes,["table","table-cell-line"]))),e)),new U)}function Y(e,t,r){let o=new U;const n=e.querySelector("tr");if(null===n)return o;const i=Array.from(n.querySelectorAll("td")).concat(Array.from(n.querySelectorAll("th"))).reduce(((e,t)=>{const r=t.getAttribute("colspan")||1;return e+parseInt(r,10)}),0),l=e.querySelectorAll("col").length;if(l===i)return t;{for(let e=0;e<i-l;e++)o.insert("\n",{"table-col":!0});if(0===l)return o.concat(t);let e=0;return t.reduce(((t,r)=>(t.insert(r.insert,r.attributes),r.attributes&&r.attributes["table-col"]&&(e+=r.insert.length,e===l&&(t=t.concat(o))),t)),new U)}}const F=n().import("core/module"),K=n().import("delta");class X extends F{static register(){n().register(E,!0),n().register(A,!0),n().register(x,!0),n().register(N,!0),n().register(C,!0),n().register(q,!0),n().register(S,!0),n().register(T,!0),n().register(T,!0),n().register("themes/better-table-snow",P,!0),n().register("ui/table-picker",V,!0)}constructor(e,t){super(e,t),this.quill.root.addEventListener("click",(r=>{const o=a(r);if(!o||o.length<=0)return;const n=o.filter((e=>e.tagName&&"TABLE"===e.tagName.toUpperCase()&&e.classList.contains("quill-better-table")))[0];if(n){if(this.table===n)return;this.table&&this.hideTableTools(),this.showTableTools(n,e,t)}else this.table&&this.hideTableTools()}),!1),this.quill.root.addEventListener("contextmenu",(r=>{if(!this.table)return!0;r.preventDefault();const o=a(r);if(!o||o.length<=0)return;const n=o.filter((e=>e.tagName&&"TABLE"===e.tagName.toUpperCase()&&e.classList.contains("quill-better-table")))[0],i=o.filter((e=>e.tagName&&"TR"===e.tagName.toUpperCase()&&e.getAttribute("data-row")))[0],l=o.filter((e=>e.tagName&&"TD"===e.tagName.toUpperCase()&&e.getAttribute("data-row")))[0];let s=this.tableSelection.selectedTds.map((e=>e.domNode)).includes(l);(this.tableSelection.selectedTds.length<=0||!s)&&this.tableSelection.setSelection(l.getBoundingClientRect(),l.getBoundingClientRect()),this.tableOperationMenu&&(this.tableOperationMenu=this.tableOperationMenu.destroy()),n&&(this.tableOperationMenu=new M({table:n,row:i,cell:l,left:r.pageX,top:r.pageY},e,t.operationMenu||{}))}),!1),e.keyboard.addBinding({key:"Backspace"},{},(function(e,t){if(0===e.index||this.quill.getLength()<=1)return!0;const[r]=this.quill.getLine(e.index);if(0===t.offset){const[t]=this.quill.getLine(e.index-1);if(null!=t&&"table-cell-line"===t.statics.blotName&&"table-cell-line"!==r.statics.blotName)return!1}return!0}));let r=e.keyboard.bindings.Backspace.pop();e.keyboard.bindings.Backspace.splice(0,1,r),e.clipboard.addMatcher("td",G),e.clipboard.addMatcher("th",W),e.clipboard.addMatcher("table",Y),e.clipboard.matchers=e.clipboard.matchers.filter((e=>"tr"!==e[0]));const o=e.getModule("toolbar"),n=o.container.querySelector("select.ql-better-table");o&&n&&(o.addHandler("better-table",this.insertTable),o.attach(n))}getTable(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.quill.getSelection();if(null==e)return[null,null,null,-1];const[t,r]=this.quill.getLine(e.index);if(null==t||t.statics.blotName!==x.blotName)return[null,null,null,-1];const o=t.tableCell(),n=o.row();return[n.table(),n,o,r]}insertTable(e,t){if(!t){if(!e.match(/^\d+x\d+$/))return;{let r=e.split("x");t=parseInt(r[0]),e=parseInt(r[1])}}const r=this.quill.getSelection(!0);if(null==r)return;let o=this.quill.getLeaf(r.index)[0],i=(new K).retain(r.index);J(o)?console.warn("Can not insert table into a table cell."):(i.insert("\n"),i=new Array(t).fill("\n").reduce(((e,t)=>(e.insert(t,{"table-col":!0}),e)),i),i=new Array(e).fill(0).reduce((e=>{let r=B();return new Array(t).fill("\n").reduce(((e,t)=>(e.insert(t,{"table-cell-line":{row:r,cell:D()}}),e)),e)}),i),this.quill.updateContents(i,n().sources.USER),this.quill.setSelection(r.index+t+1,n().sources.API))}showTableTools(e,t,r){this.table=e,this.columnTool=new c(e,t,r),this.tableSelection=new H(e,t,r)}hideTableTools(){this.columnTool&&this.columnTool.destroy(),this.tableSelection&&this.tableSelection.destroy(),this.tableOperationMenu&&this.tableOperationMenu.destroy(),this.columnTool=null,this.tableSelection=null,this.tableOperationMenu=null,this.table=null}}function Q(e){return{key:e?"ArrowUp":"ArrowDown",collapsed:!0,format:["table-cell-line"],handler(t,r){const o=e?"prev":"next";if(null!=r.line[o])return!0;const i=r.line.parent,l=i.parent[o];if(null!=l&&"table-row"===l.statics.blotName){let e=l.children.head,t=parseInt(e.formats().colspan,10),r=i,o=parseInt(r.formats().colspan,10);for(;null!=r.prev;)r=r.prev,o+=parseInt(r.formats().colspan,10);for(;null!=e.next&&t<o;)e=e.next,t+=parseInt(e.formats().colspan,10);const s=e.offset(this.quill.scroll);this.quill.setSelection(s,0,n().sources.USER)}else{const t=i.table().parent[o];null!=t&&(e?this.quill.setSelection(t.offset(this.quill.scroll)+t.length()-1,0,n().sources.USER):this.quill.setSelection(t.offset(this.quill.scroll),0,n().sources.USER))}return!1}}}function J(e){return!(!e||!e.parent)&&(e.parent.statics.blotName===N.blotName||J(e.parent))}X.keyboardBindings={"table-cell-line backspace":{key:"Backspace",format:["table-cell-line"],collapsed:!0,offset:0,handler(e,t){const[r,o]=this.quill.getLine(e.index);return!(!r.prev||"table-cell-line"!==r.prev.statics.blotName)}},"table-cell-line delete":{key:"Delete",format:["table-cell-line"],collapsed:!0,suffix:/^$/,handler(){}},"table-cell-line enter":{key:"Enter",shiftKey:null,format:["table-cell-line"],handler(e,t){if(this.quill.selection&&this.quill.selection.composing)return;const r=n().imports.parchment.Scope;e.length>0&&this.quill.scroll.deleteAt(e.index,e.length);const o=Object.keys(t.format).reduce(((e,o)=>(this.quill.scroll.query(o,r.BLOCK)&&!Array.isArray(t.format[o])&&(e[o]=t.format[o]),e)),{});this.quill.insertText(e.index,"\n",o["table-cell-line"],n().sources.USER),this.quill.setSelection(e.index+1,n().sources.SILENT),this.quill.focus(),Object.keys(t.format).forEach((e=>{null==o[e]&&(Array.isArray(t.format[e])||"link"!==e&&this.quill.format(e,t.format[e],n().sources.USER))}))}},"table-cell-line up":Q(!0),"table-cell-line down":Q(!1),"down-to-table":{key:"ArrowDown",collapsed:!0,handler(e,t){const r=t.line.next;if(r&&"table-view"===r.statics.blotName){const e=r.table().rows()[0].children.head.children.head;return this.quill.setSelection(e.offset(this.quill.scroll),0,n().sources.USER),!1}return!0}},"up-to-table":{key:"ArrowUp",collapsed:!0,handler(e,t){const r=t.line.prev;if(r&&"table-view"===r.statics.blotName){const e=r.table().rows(),t=e[e.length-1].children.head.children.head;return this.quill.setSelection(t.offset(this.quill.scroll),0,n().sources.USER),!1}return!0}}};const Z=X},470:e=>{var t=Object.prototype.hasOwnProperty,r=Object.prototype.toString,o=Object.defineProperty,n=Object.getOwnPropertyDescriptor,i=function(e){return"function"==typeof Array.isArray?Array.isArray(e):"[object Array]"===r.call(e)},l=function(e){if(!e||"[object Object]"!==r.call(e))return!1;var o,n=t.call(e,"constructor"),i=e.constructor&&e.constructor.prototype&&t.call(e.constructor.prototype,"isPrototypeOf");if(e.constructor&&!n&&!i)return!1;for(o in e);return void 0===o||t.call(e,o)},s=function(e,t){o&&"__proto__"===t.name?o(e,t.name,{enumerable:!0,configurable:!0,value:t.newValue,writable:!0}):e[t.name]=t.newValue},a=function(e,r){if("__proto__"===r){if(!t.call(e,r))return;if(n)return n(e,r).value}return e[r]};e.exports=function e(){var t,r,o,n,c,d,h=arguments[0],u=1,p=arguments.length,f=!1;for("boolean"==typeof h&&(f=h,h=arguments[1]||{},u=2),(null==h||"object"!=typeof h&&"function"!=typeof h)&&(h={});u<p;++u)if(null!=(t=arguments[u]))for(r in t)o=a(h,r),h!==(n=a(t,r))&&(f&&n&&(l(n)||(c=i(n)))?(c?(c=!1,d=o&&i(o)?o:[]):d=o&&l(o)?o:{},s(h,{name:r,newValue:e(f,d,n)})):void 0!==n&&s(h,{name:r,newValue:n}));return h}},436:t=>{t.exports=e}},n={};function i(e){var t=n[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var r=n[e]={exports:{}};try{var l={id:e,module:r,factory:o[e],require:i};i.i.forEach((function(e){e(l)})),r=l.module,l.factory.call(r.exports,r,r.exports,l.require)}catch(e){throw r.error=e,e}return r.exports}i.m=o,i.c=n,i.i=[],i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},i.d=(e,t)=>{for(var r in t)i.o(t,r)&&!i.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},i.hu=e=>e+"."+i.h()+".hot-update.js",i.miniCssF=e=>{},i.hmrF=()=>"quill-better-table_min_js."+i.h()+".hot-update.json",i.h=()=>"535f5b4d4e35ba048224",i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),t={},r="quillBetterTable:",i.l=(e,o,n,l)=>{if(t[e])t[e].push(o);else{var s,a;if(void 0!==n)for(var c=document.getElementsByTagName("script"),d=0;d<c.length;d++){var h=c[d];if(h.getAttribute("src")==e||h.getAttribute("data-webpack")==r+n){s=h;break}}s||(a=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,i.nc&&s.setAttribute("nonce",i.nc),s.setAttribute("data-webpack",r+n),s.src=e),t[e]=[o];var u=(r,o)=>{s.onerror=s.onload=null,clearTimeout(p);var n=t[e];if(delete t[e],s.parentNode&&s.parentNode.removeChild(s),n&&n.forEach((e=>e(o))),r)return r(o)},p=setTimeout(u.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=u.bind(null,s.onerror),s.onload=u.bind(null,s.onload),a&&document.head.appendChild(s)}},(()=>{var e,t,r,o={},n=i.c,l=[],s=[],a="idle",c=0,d=[];function h(e){a=e;for(var t=[],r=0;r<s.length;r++)t[r]=s[r].call(null,e);return Promise.all(t)}function u(){0==--c&&h("ready").then((function(){if(0===c){var e=d;d=[];for(var t=0;t<e.length;t++)e[t]()}}))}function p(e){if("idle"!==a)throw new Error("check() is only allowed in idle status");return h("check").then(i.hmrM).then((function(r){return r?h("prepare").then((function(){var o=[];return t=[],Promise.all(Object.keys(i.hmrC).reduce((function(e,n){return i.hmrC[n](r.c,r.r,r.m,e,t,o),e}),[])).then((function(){return t=function(){return e?m(e):h("ready").then((function(){return o}))},0===c?t():new Promise((function(e){d.push((function(){e(t())}))}));var t}))})):h(b()?"ready":"idle").then((function(){return null}))}))}function f(e){return"ready"!==a?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+a+")")})):m(e)}function m(e){e=e||{},b();var o=t.map((function(t){return t(e)}));t=void 0;var n=o.map((function(e){return e.error})).filter(Boolean);if(n.length>0)return h("abort").then((function(){throw n[0]}));var i=h("dispose");o.forEach((function(e){e.dispose&&e.dispose()}));var l,s=h("apply"),a=function(e){l||(l=e)},c=[];return o.forEach((function(e){if(e.apply){var t=e.apply(a);if(t)for(var r=0;r<t.length;r++)c.push(t[r])}})),Promise.all([i,s]).then((function(){return l?h("fail").then((function(){throw l})):r?m(e).then((function(e){return c.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):h("idle").then((function(){return c}))}))}function b(){if(r)return t||(t=[]),Object.keys(i.hmrI).forEach((function(e){r.forEach((function(r){i.hmrI[e](r,t)}))})),r=void 0,!0}i.hmrD=o,i.i.push((function(d){var m,b,g,v,w=d.module,y=function(t,r){var o=n[r];if(!o)return t;var i=function(i){if(o.hot.active){if(n[i]){var s=n[i].parents;-1===s.indexOf(r)&&s.push(r)}else l=[r],e=i;-1===o.children.indexOf(i)&&o.children.push(i)}else console.warn("[HMR] unexpected require("+i+") from disposed module "+r),l=[];return t(i)},s=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(r){t[e]=r}}};for(var d in t)Object.prototype.hasOwnProperty.call(t,d)&&"e"!==d&&Object.defineProperty(i,d,s(d));return i.e=function(e){return function(e){switch(a){case"ready":h("prepare");case"prepare":return c++,e.then(u,u),e;default:return e}}(t.e(e))},i}(d.require,d.id);w.hot=(m=d.id,b=w,v={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:g=e!==m,_requireSelf:function(){l=b.parents.slice(),e=g?void 0:m,i(m)},active:!0,accept:function(e,t,r){if(void 0===e)v._selfAccepted=!0;else if("function"==typeof e)v._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var o=0;o<e.length;o++)v._acceptedDependencies[e[o]]=t||function(){},v._acceptedErrorHandlers[e[o]]=r;else v._acceptedDependencies[e]=t||function(){},v._acceptedErrorHandlers[e]=r},decline:function(e){if(void 0===e)v._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)v._declinedDependencies[e[t]]=!0;else v._declinedDependencies[e]=!0},dispose:function(e){v._disposeHandlers.push(e)},addDisposeHandler:function(e){v._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=v._disposeHandlers.indexOf(e);t>=0&&v._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,a){case"idle":t=[],Object.keys(i.hmrI).forEach((function(e){i.hmrI[e](m,t)})),h("ready");break;case"ready":Object.keys(i.hmrI).forEach((function(e){i.hmrI[e](m,t)}));break;case"prepare":case"check":case"dispose":case"apply":(r=r||[]).push(m)}},check:p,apply:f,status:function(e){if(!e)return a;s.push(e)},addStatusHandler:function(e){s.push(e)},removeStatusHandler:function(e){var t=s.indexOf(e);t>=0&&s.splice(t,1)},data:o[m]},e=void 0,v),w.parents=l,w.children=[],l=[],d.require=y})),i.hmrC={},i.hmrI={}})(),(()=>{var e;i.g.importScripts&&(e=i.g.location+"");var t=i.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=e})(),(()=>{if("undefined"!=typeof document){var e=[],t=[],r=r=>({dispose:()=>{for(var t=0;t<e.length;t++){var r=e[t];r.parentNode&&r.parentNode.removeChild(r)}e.length=0},apply:()=>{for(var e=0;e<t.length;e++)t[e].rel="stylesheet";t.length=0}});i.hmrC.miniCss=(o,n,l,s,a,c)=>{a.push(r),o.forEach((r=>{var o=i.miniCssF(r),n=i.p+o,l=((e,t)=>{for(var r=document.getElementsByTagName("link"),o=0;o<r.length;o++){var n=(l=r[o]).getAttribute("data-href")||l.getAttribute("href");if("stylesheet"===l.rel&&(n===e||n===t))return l}var i=document.getElementsByTagName("style");for(o=0;o<i.length;o++){var l;if((n=(l=i[o]).getAttribute("data-href"))===e||n===t)return l}})(o,n);l&&s.push(new Promise(((o,i)=>{var s=((e,t,r,o,n)=>{var i=document.createElement("link");return i.rel="stylesheet",i.type="text/css",i.onerror=i.onload=r=>{if(i.onerror=i.onload=null,"load"===r.type)o();else{var l=r&&("load"===r.type?"missing":r.type),s=r&&r.target&&r.target.href||t,a=new Error("Loading CSS chunk "+e+" failed.\n("+s+")");a.code="CSS_CHUNK_LOAD_FAILED",a.type=l,a.request=s,i.parentNode.removeChild(i),n(a)}},i.href=t,r?r.parentNode.insertBefore(i,r.nextSibling):document.head.appendChild(i),i})(r,n,l,(()=>{s.as="style",s.rel="preload",o()}),i);e.push(l),t.push(s)})))}))}}})(),(()=>{var e,t,r,o,n,l=i.hmrS_jsonp=i.hmrS_jsonp||{599:0},s={};function a(t,r){return e=r,new Promise(((e,r)=>{s[t]=e;var o=i.p+i.hu(t),n=new Error;i.l(o,(e=>{if(s[t]){s[t]=void 0;var o=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;n.message="Loading hot update chunk "+t+" failed.\n("+o+": "+i+")",n.name="ChunkLoadError",n.type=o,n.request=i,r(n)}}))}))}function c(e){function s(e){for(var t=[e],r={},o=t.map((function(e){return{chain:[e],id:e}}));o.length>0;){var n=o.pop(),l=n.id,s=n.chain,c=i.c[l];if(c&&(!c.hot._selfAccepted||c.hot._selfInvalidated)){if(c.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:l};if(c.hot._main)return{type:"unaccepted",chain:s,moduleId:l};for(var d=0;d<c.parents.length;d++){var h=c.parents[d],u=i.c[h];if(u){if(u.hot._declinedDependencies[l])return{type:"declined",chain:s.concat([h]),moduleId:l,parentId:h};-1===t.indexOf(h)&&(u.hot._acceptedDependencies[l]?(r[h]||(r[h]=[]),a(r[h],[l])):(delete r[h],t.push(h),o.push({chain:s.concat([h]),id:h})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function a(e,t){for(var r=0;r<t.length;r++){var o=t[r];-1===e.indexOf(o)&&e.push(o)}}i.f&&delete i.f.jsonpHmr,t=void 0;var c={},d=[],h={},u=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in r)if(i.o(r,p)){var f,m=r[p],b=!1,g=!1,v=!1,w="";switch((f=m?s(p):{type:"disposed",moduleId:p}).chain&&(w="\nUpdate propagation: "+f.chain.join(" -> ")),f.type){case"self-declined":e.onDeclined&&e.onDeclined(f),e.ignoreDeclined||(b=new Error("Aborted because of self decline: "+f.moduleId+w));break;case"declined":e.onDeclined&&e.onDeclined(f),e.ignoreDeclined||(b=new Error("Aborted because of declined dependency: "+f.moduleId+" in "+f.parentId+w));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(f),e.ignoreUnaccepted||(b=new Error("Aborted because "+p+" is not accepted"+w));break;case"accepted":e.onAccepted&&e.onAccepted(f),g=!0;break;case"disposed":e.onDisposed&&e.onDisposed(f),v=!0;break;default:throw new Error("Unexception type "+f.type)}if(b)return{error:b};if(g)for(p in h[p]=m,a(d,f.outdatedModules),f.outdatedDependencies)i.o(f.outdatedDependencies,p)&&(c[p]||(c[p]=[]),a(c[p],f.outdatedDependencies[p]));v&&(a(d,[f.moduleId]),h[p]=u)}r=void 0;for(var y,x=[],N=0;N<d.length;N++){var C=d[N],q=i.c[C];q&&(q.hot._selfAccepted||q.hot._main)&&h[C]!==u&&!q.hot._selfInvalidated&&x.push({module:C,require:q.hot._requireSelf,errorHandler:q.hot._selfAccepted})}return{dispose:function(){var e;o.forEach((function(e){delete l[e]})),o=void 0;for(var t,r=d.slice();r.length>0;){var n=r.pop(),s=i.c[n];if(s){var a={},h=s.hot._disposeHandlers;for(N=0;N<h.length;N++)h[N].call(null,a);for(i.hmrD[n]=a,s.hot.active=!1,delete i.c[n],delete c[n],N=0;N<s.children.length;N++){var u=i.c[s.children[N]];u&&(e=u.parents.indexOf(n))>=0&&u.parents.splice(e,1)}}}for(var p in c)if(i.o(c,p)&&(s=i.c[p]))for(y=c[p],N=0;N<y.length;N++)t=y[N],(e=s.children.indexOf(t))>=0&&s.children.splice(e,1)},apply:function(t){for(var r in h)i.o(h,r)&&(i.m[r]=h[r]);for(var o=0;o<n.length;o++)n[o](i);for(var l in c)if(i.o(c,l)){var s=i.c[l];if(s){y=c[l];for(var a=[],u=[],p=[],f=0;f<y.length;f++){var m=y[f],b=s.hot._acceptedDependencies[m],g=s.hot._acceptedErrorHandlers[m];if(b){if(-1!==a.indexOf(b))continue;a.push(b),u.push(g),p.push(m)}}for(var v=0;v<a.length;v++)try{a[v].call(null,y)}catch(r){if("function"==typeof u[v])try{u[v](r,{moduleId:l,dependencyId:p[v]})}catch(o){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:l,dependencyId:p[v],error:o,originalError:r}),e.ignoreErrored||(t(o),t(r))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:l,dependencyId:p[v],error:r}),e.ignoreErrored||t(r)}}}for(var w=0;w<x.length;w++){var N=x[w],C=N.module;try{N.require(C)}catch(r){if("function"==typeof N.errorHandler)try{N.errorHandler(r,{moduleId:C,module:i.c[C]})}catch(o){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:C,error:o,originalError:r}),e.ignoreErrored||(t(o),t(r))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:C,error:r}),e.ignoreErrored||t(r)}}return d}}}self.webpackHotUpdatequillBetterTable=(t,o,l)=>{for(var a in o)i.o(o,a)&&(r[a]=o[a],e&&e.push(a));l&&n.push(l),s[t]&&(s[t](),s[t]=void 0)},i.hmrI.jsonp=function(e,t){r||(r={},n=[],o=[],t.push(c)),i.o(r,e)||(r[e]=i.m[e])},i.hmrC.jsonp=function(e,s,d,h,u,p){u.push(c),t={},o=s,r=d.reduce((function(e,t){return e[t]=!1,e}),{}),n=[],e.forEach((function(e){i.o(l,e)&&void 0!==l[e]?(h.push(a(e,p)),t[e]=!0):t[e]=!1})),i.f&&(i.f.jsonpHmr=function(e,r){t&&i.o(t,e)&&!t[e]&&(r.push(a(e)),t[e]=!0)})},i.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(i.p+i.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})();var l=i(511);return l.default})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,